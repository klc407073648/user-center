/**
 *
 *  Subjects.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Subjects.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::student;

const std::string Subjects::Cols::_id = "id";
const std::string Subjects::Cols::_name = "name";
const std::string Subjects::Cols::_age = "age";
const std::string Subjects::Cols::_sex = "sex";
const std::string Subjects::Cols::_address = "address";
const std::string Subjects::primaryKeyName = "";
const bool Subjects::hasPrimaryKey = false;
const std::string Subjects::tableName = "subjects";

const std::vector<typename Subjects::MetaData> Subjects::metaData_={
{"id","int32_t","integer",4,0,0,0},
{"name","std::string","character varying",255,0,0,0},
{"age","int32_t","integer",4,0,0,0},
{"sex","int32_t","integer",4,0,0,0},
{"address","std::string","character varying",255,0,0,0}
};
const std::string &Subjects::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Subjects::Subjects(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<int32_t>(r["id"].as<int32_t>());
        }
        if(!r["name"].isNull())
        {
            name_=std::make_shared<std::string>(r["name"].as<std::string>());
        }
        if(!r["age"].isNull())
        {
            age_=std::make_shared<int32_t>(r["age"].as<int32_t>());
        }
        if(!r["sex"].isNull())
        {
            sex_=std::make_shared<int32_t>(r["sex"].as<int32_t>());
        }
        if(!r["address"].isNull())
        {
            address_=std::make_shared<std::string>(r["address"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 5 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            name_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            age_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            sex_=std::make_shared<int32_t>(r[index].as<int32_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            address_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Subjects::Subjects(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            age_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            sex_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

Subjects::Subjects(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("age"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["age"].isNull())
        {
            age_=std::make_shared<int32_t>((int32_t)pJson["age"].asInt64());
        }
    }
    if(pJson.isMember("sex"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["sex"].isNull())
        {
            sex_=std::make_shared<int32_t>((int32_t)pJson["sex"].asInt64());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
}

void Subjects::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 5)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[0]].asInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            name_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            age_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[2]].asInt64());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            sex_=std::make_shared<int32_t>((int32_t)pJson[pMasqueradingVector[3]].asInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[4]].asString());
        }
    }
}

void Subjects::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0] = true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<int32_t>((int32_t)pJson["id"].asInt64());
        }
    }
    if(pJson.isMember("name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["name"].isNull())
        {
            name_=std::make_shared<std::string>(pJson["name"].asString());
        }
    }
    if(pJson.isMember("age"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["age"].isNull())
        {
            age_=std::make_shared<int32_t>((int32_t)pJson["age"].asInt64());
        }
    }
    if(pJson.isMember("sex"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["sex"].isNull())
        {
            sex_=std::make_shared<int32_t>((int32_t)pJson["sex"].asInt64());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
}

const int32_t &Subjects::getValueOfId() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Subjects::getId() const noexcept
{
    return id_;
}
void Subjects::setId(const int32_t &pId) noexcept
{
    id_ = std::make_shared<int32_t>(pId);
    dirtyFlag_[0] = true;
}
void Subjects::setIdToNull() noexcept
{
    id_.reset();
    dirtyFlag_[0] = true;
}

const std::string &Subjects::getValueOfName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(name_)
        return *name_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Subjects::getName() const noexcept
{
    return name_;
}
void Subjects::setName(const std::string &pName) noexcept
{
    name_ = std::make_shared<std::string>(pName);
    dirtyFlag_[1] = true;
}
void Subjects::setName(std::string &&pName) noexcept
{
    name_ = std::make_shared<std::string>(std::move(pName));
    dirtyFlag_[1] = true;
}
void Subjects::setNameToNull() noexcept
{
    name_.reset();
    dirtyFlag_[1] = true;
}

const int32_t &Subjects::getValueOfAge() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(age_)
        return *age_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Subjects::getAge() const noexcept
{
    return age_;
}
void Subjects::setAge(const int32_t &pAge) noexcept
{
    age_ = std::make_shared<int32_t>(pAge);
    dirtyFlag_[2] = true;
}
void Subjects::setAgeToNull() noexcept
{
    age_.reset();
    dirtyFlag_[2] = true;
}

const int32_t &Subjects::getValueOfSex() const noexcept
{
    const static int32_t defaultValue = int32_t();
    if(sex_)
        return *sex_;
    return defaultValue;
}
const std::shared_ptr<int32_t> &Subjects::getSex() const noexcept
{
    return sex_;
}
void Subjects::setSex(const int32_t &pSex) noexcept
{
    sex_ = std::make_shared<int32_t>(pSex);
    dirtyFlag_[3] = true;
}
void Subjects::setSexToNull() noexcept
{
    sex_.reset();
    dirtyFlag_[3] = true;
}

const std::string &Subjects::getValueOfAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(address_)
        return *address_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Subjects::getAddress() const noexcept
{
    return address_;
}
void Subjects::setAddress(const std::string &pAddress) noexcept
{
    address_ = std::make_shared<std::string>(pAddress);
    dirtyFlag_[4] = true;
}
void Subjects::setAddress(std::string &&pAddress) noexcept
{
    address_ = std::make_shared<std::string>(std::move(pAddress));
    dirtyFlag_[4] = true;
}
void Subjects::setAddressToNull() noexcept
{
    address_.reset();
    dirtyFlag_[4] = true;
}

void Subjects::updateId(const uint64_t id)
{
}

const std::vector<std::string> &Subjects::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "name",
        "age",
        "sex",
        "address"
    };
    return inCols;
}

void Subjects::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAge())
        {
            binder << getValueOfAge();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Subjects::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    return ret;
}

void Subjects::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getName())
        {
            binder << getValueOfName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getAge())
        {
            binder << getValueOfAge();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getSex())
        {
            binder << getValueOfSex();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Subjects::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getAge())
    {
        ret["age"]=getValueOfAge();
    }
    else
    {
        ret["age"]=Json::Value();
    }
    if(getSex())
    {
        ret["sex"]=getValueOfSex();
    }
    else
    {
        ret["sex"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    return ret;
}

Json::Value Subjects::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 5)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getName())
            {
                ret[pMasqueradingVector[1]]=getValueOfName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getAge())
            {
                ret[pMasqueradingVector[2]]=getValueOfAge();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getSex())
            {
                ret[pMasqueradingVector[3]]=getValueOfSex();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getAddress())
            {
                ret[pMasqueradingVector[4]]=getValueOfAddress();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getName())
    {
        ret["name"]=getValueOfName();
    }
    else
    {
        ret["name"]=Json::Value();
    }
    if(getAge())
    {
        ret["age"]=getValueOfAge();
    }
    else
    {
        ret["age"]=Json::Value();
    }
    if(getSex())
    {
        ret["sex"]=getValueOfSex();
    }
    else
    {
        ret["sex"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    return ret;
}

bool Subjects::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, true))
            return false;
    }
    if(pJson.isMember("age"))
    {
        if(!validJsonOfField(2, "age", pJson["age"], err, true))
            return false;
    }
    if(pJson.isMember("sex"))
    {
        if(!validJsonOfField(3, "sex", pJson["sex"], err, true))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(4, "address", pJson["address"], err, true))
            return false;
    }
    return true;
}
bool Subjects::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                  const std::vector<std::string> &pMasqueradingVector,
                                                  std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Subjects::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    if(pJson.isMember("name"))
    {
        if(!validJsonOfField(1, "name", pJson["name"], err, false))
            return false;
    }
    if(pJson.isMember("age"))
    {
        if(!validJsonOfField(2, "age", pJson["age"], err, false))
            return false;
    }
    if(pJson.isMember("sex"))
    {
        if(!validJsonOfField(3, "sex", pJson["sex"], err, false))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(4, "address", pJson["address"], err, false))
            return false;
    }
    return true;
}
bool Subjects::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                std::string &err)
{
    if(pMasqueradingVector.size() != 5)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Subjects::validJsonOfField(size_t index,
                                const std::string &fieldName,
                                const Json::Value &pJson,
                                std::string &err,
                                bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 3:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
            break;
    }
    return true;
}
